{"ast":null,"code":"var wcwidth;\n\ntry {\n  wcwidth = require('wcwidth');\n} catch (e) {}\n\nmodule.exports = Table;\n\nfunction Table() {\n  this.rows = [];\n  this.row = {\n    __printers: {}\n  };\n}\n/**\n * Push the current row to the table and start a new one\n *\n * @returns {Table} `this`\n */\n\n\nTable.prototype.newRow = function () {\n  this.rows.push(this.row);\n  this.row = {\n    __printers: {}\n  };\n  return this;\n};\n/**\n * Write cell in the current row\n *\n * @param {String} col          - Column name\n * @param {Any} val             - Cell value\n * @param {Function} [printer]  - Printer function to format the value\n * @returns {Table} `this`\n */\n\n\nTable.prototype.cell = function (col, val, printer) {\n  this.row[col] = val;\n  this.row.__printers[col] = printer || string;\n  return this;\n};\n/**\n * String to separate columns\n */\n\n\nTable.prototype.separator = '  ';\n\nfunction string(val) {\n  return val === undefined ? '' : '' + val;\n}\n\nfunction length(str) {\n  var s = str.replace(/\\u001b\\[\\d+m/g, '');\n  return wcwidth == null ? s.length : wcwidth(s);\n}\n/**\n * Default printer\n */\n\n\nTable.string = string;\n/**\n * Create a printer which right aligns the content by padding with `ch` on the left\n *\n * @param {String} ch\n * @returns {Function}\n */\n\nTable.leftPadder = leftPadder;\n\nfunction leftPadder(ch) {\n  return function (val, width) {\n    var str = string(val);\n    var len = length(str);\n    var pad = width > len ? Array(width - len + 1).join(ch) : '';\n    return pad + str;\n  };\n}\n/**\n * Printer which right aligns the content\n */\n\n\nvar padLeft = Table.padLeft = leftPadder(' ');\n/**\n * Create a printer which pads with `ch` on the right\n *\n * @param {String} ch\n * @returns {Function}\n */\n\nTable.rightPadder = rightPadder;\n\nfunction rightPadder(ch) {\n  return function padRight(val, width) {\n    var str = string(val);\n    var len = length(str);\n    var pad = width > len ? Array(width - len + 1).join(ch) : '';\n    return str + pad;\n  };\n}\n\nvar padRight = rightPadder(' ');\n/**\n * Create a printer for numbers\n *\n * Will do right alignment and optionally fix the number of digits after decimal point\n *\n * @param {Number} [digits] - Number of digits for fixpoint notation\n * @returns {Function}\n */\n\nTable.number = function (digits) {\n  return function (val, width) {\n    if (val == null) return '';\n    if (typeof val != 'number') throw new Error('' + val + ' is not a number');\n    var str = digits == null ? val + '' : val.toFixed(digits);\n    return padLeft(str, width);\n  };\n};\n\nfunction each(row, fn) {\n  for (var key in row) {\n    if (key == '__printers') continue;\n    fn(key, row[key]);\n  }\n}\n/**\n * Get list of columns in printing order\n *\n * @returns {string[]}\n */\n\n\nTable.prototype.columns = function () {\n  var cols = {};\n\n  for (var i = 0; i < 2; i++) {\n    // do 2 times\n    this.rows.forEach(function (row) {\n      var idx = 0;\n      each(row, function (key) {\n        idx = Math.max(idx, cols[key] || 0);\n        cols[key] = idx;\n        idx++;\n      });\n    });\n  }\n\n  return Object.keys(cols).sort(function (a, b) {\n    return cols[a] - cols[b];\n  });\n};\n/**\n * Format just rows, i.e. print the table without headers and totals\n *\n * @returns {String} String representaion of the table\n */\n\n\nTable.prototype.print = function () {\n  var cols = this.columns();\n  var separator = this.separator;\n  var widths = {};\n  var out = ''; // Calc widths\n\n  this.rows.forEach(function (row) {\n    each(row, function (key, val) {\n      var str = row.__printers[key].call(row, val);\n\n      widths[key] = Math.max(length(str), widths[key] || 0);\n    });\n  }); // Now print\n\n  this.rows.forEach(function (row) {\n    var line = '';\n    cols.forEach(function (key) {\n      var width = widths[key];\n      var str = row.hasOwnProperty(key) ? '' + row.__printers[key].call(row, row[key], width) : '';\n      line += padRight(str, width) + separator;\n    });\n    line = line.slice(0, -separator.length);\n    out += line + '\\n';\n  });\n  return out;\n};\n/**\n * Format the table\n *\n * @returns {String}\n */\n\n\nTable.prototype.toString = function () {\n  var cols = this.columns();\n  var out = new Table(); // copy options\n\n  out.separator = this.separator; // Write header\n\n  cols.forEach(function (col) {\n    out.cell(col, col);\n  });\n  out.newRow();\n  out.pushDelimeter(cols); // Write body\n\n  out.rows = out.rows.concat(this.rows); // Totals\n\n  if (this.totals && this.rows.length) {\n    out.pushDelimeter(cols);\n    this.forEachTotal(out.cell.bind(out));\n    out.newRow();\n  }\n\n  return out.print();\n};\n/**\n * Push delimeter row to the table (with each cell filled with dashs during printing)\n *\n * @param {String[]} [cols]\n * @returns {Table} `this`\n */\n\n\nTable.prototype.pushDelimeter = function (cols) {\n  cols = cols || this.columns();\n  cols.forEach(function (col) {\n    this.cell(col, undefined, leftPadder('-'));\n  }, this);\n  return this.newRow();\n};\n/**\n * Compute all totals and yield the results to `cb`\n *\n * @param {Function} cb - Callback function with signature `(column, value, printer)`\n */\n\n\nTable.prototype.forEachTotal = function (cb) {\n  for (var key in this.totals) {\n    var aggr = this.totals[key];\n    var acc = aggr.init;\n    var len = this.rows.length;\n    this.rows.forEach(function (row, idx) {\n      acc = aggr.reduce.call(row, acc, row[key], idx, len);\n    });\n    cb(key, acc, aggr.printer);\n  }\n};\n/**\n * Format the table so that each row represents column and each column represents row\n *\n * @param {Object} [opts]\n * @param {String} [ops.separator] - Column separation string\n * @param {Function} [opts.namePrinter] - Printer to format column names\n * @returns {String}\n */\n\n\nTable.prototype.printTransposed = function (opts) {\n  opts = opts || {};\n  var out = new Table();\n  out.separator = opts.separator || this.separator;\n  this.columns().forEach(function (col) {\n    out.cell(0, col, opts.namePrinter);\n    this.rows.forEach(function (row, idx) {\n      out.cell(idx + 1, row[col], row.__printers[col]);\n    });\n    out.newRow();\n  }, this);\n  return out.print();\n};\n/**\n * Sort the table\n *\n * @param {Function|string[]} [cmp] - Either compare function or a list of columns to sort on\n * @returns {Table} `this`\n */\n\n\nTable.prototype.sort = function (cmp) {\n  if (typeof cmp == 'function') {\n    this.rows.sort(cmp);\n    return this;\n  }\n\n  var keys = Array.isArray(cmp) ? cmp : this.columns();\n  var comparators = keys.map(function (key) {\n    var order = 'asc';\n    var m = /(.*)\\|\\s*(asc|des)\\s*$/.exec(key);\n\n    if (m) {\n      key = m[1];\n      order = m[2];\n    }\n\n    return function (a, b) {\n      return order == 'asc' ? compare(a[key], b[key]) : compare(b[key], a[key]);\n    };\n  });\n  return this.sort(function (a, b) {\n    for (var i = 0; i < comparators.length; i++) {\n      var order = comparators[i](a, b);\n      if (order != 0) return order;\n    }\n\n    return 0;\n  });\n};\n\nfunction compare(a, b) {\n  if (a === b) return 0;\n  if (a === undefined) return 1;\n  if (b === undefined) return -1;\n  if (a === null) return 1;\n  if (b === null) return -1;\n  if (a > b) return 1;\n  if (a < b) return -1;\n  return compare(String(a), String(b));\n}\n/**\n * Add a total for the column\n *\n * @param {String} col - column name\n * @param {Object} [opts]\n * @param {Function} [opts.reduce = sum] - reduce(acc, val, idx, length) function to compute the total value\n * @param {Function} [opts.printer = padLeft] - Printer to format the total cell\n * @param {Any} [opts.init = 0] - Initial value for reduction\n * @returns {Table} `this`\n */\n\n\nTable.prototype.total = function (col, opts) {\n  opts = opts || {};\n  this.totals = this.totals || {};\n  this.totals[col] = {\n    reduce: opts.reduce || Table.aggr.sum,\n    printer: opts.printer || padLeft,\n    init: opts.init == null ? 0 : opts.init\n  };\n  return this;\n};\n/**\n * Predefined helpers for totals\n */\n\n\nTable.aggr = {};\n/**\n * Create a printer which formats the value with `printer`,\n * adds the `prefix` to it and right aligns the whole thing\n *\n * @param {String} prefix\n * @param {Function} printer\n * @returns {printer}\n */\n\nTable.aggr.printer = function (prefix, printer) {\n  printer = printer || string;\n  return function (val, width) {\n    return padLeft(prefix + printer(val), width);\n  };\n};\n/**\n * Sum reduction\n */\n\n\nTable.aggr.sum = function (acc, val) {\n  return acc + val;\n};\n/**\n * Average reduction\n */\n\n\nTable.aggr.avg = function (acc, val, idx, len) {\n  acc = acc + val;\n  return idx + 1 == len ? acc / len : acc;\n};\n/**\n * Print the array or object\n *\n * @param {Array|Object} obj - Object to print\n * @param {Function|Object} [format] - Format options\n * @param {Function} [cb] - Table post processing and formating\n * @returns {String}\n */\n\n\nTable.print = function (obj, format, cb) {\n  var opts = format || {};\n  format = typeof format == 'function' ? format : function (obj, cell) {\n    for (var key in obj) {\n      if (!obj.hasOwnProperty(key)) continue;\n      var params = opts[key] || {};\n      cell(params.name || key, obj[key], params.printer);\n    }\n  };\n  var t = new Table();\n  var cell = t.cell.bind(t);\n\n  if (Array.isArray(obj)) {\n    cb = cb || function (t) {\n      return t.toString();\n    };\n\n    obj.forEach(function (item) {\n      format(item, cell);\n      t.newRow();\n    });\n  } else {\n    cb = cb || function (t) {\n      return t.printTransposed({\n        separator: ' : '\n      });\n    };\n\n    format(obj, cell);\n    t.newRow();\n  }\n\n  return cb(t);\n};\n/**\n * Same as `Table.print()` but yields the result to `console.log()`\n */\n\n\nTable.log = function (obj, format, cb) {\n  console.log(Table.print(obj, format, cb));\n};\n/**\n * Same as `.toString()` but yields the result to `console.log()`\n */\n\n\nTable.prototype.log = function () {\n  console.log(this.toString());\n};","map":{"version":3,"sources":["/home/pneumato/latrueo-bot/node_modules/easy-table/table.js"],"names":["wcwidth","require","e","module","exports","Table","rows","row","__printers","prototype","newRow","push","cell","col","val","printer","string","separator","undefined","length","str","s","replace","leftPadder","ch","width","len","pad","Array","join","padLeft","rightPadder","padRight","number","digits","Error","toFixed","each","fn","key","columns","cols","i","forEach","idx","Math","max","Object","keys","sort","a","b","print","widths","out","call","line","hasOwnProperty","slice","toString","pushDelimeter","concat","totals","forEachTotal","bind","cb","aggr","acc","init","reduce","printTransposed","opts","namePrinter","cmp","isArray","comparators","map","order","m","exec","compare","String","total","sum","prefix","avg","obj","format","params","name","t","item","log","console"],"mappings":"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","sourcesContent":["var wcwidth\n\ntry {\n  wcwidth = require('wcwidth')\n} catch(e) {}\n\nmodule.exports = Table\n\nfunction Table() {\n  this.rows = []\n  this.row = {__printers : {}}\n}\n\n/**\n * Push the current row to the table and start a new one\n *\n * @returns {Table} `this`\n */\n\nTable.prototype.newRow = function() {\n  this.rows.push(this.row)\n  this.row = {__printers : {}}\n  return this\n}\n\n/**\n * Write cell in the current row\n *\n * @param {String} col          - Column name\n * @param {Any} val             - Cell value\n * @param {Function} [printer]  - Printer function to format the value\n * @returns {Table} `this`\n */\n\nTable.prototype.cell = function(col, val, printer) {\n  this.row[col] = val\n  this.row.__printers[col] = printer || string\n  return this\n}\n\n/**\n * String to separate columns\n */\n\nTable.prototype.separator = '  '\n\nfunction string(val) {\n  return val === undefined ? '' : ''+val\n}\n\nfunction length(str) {\n  var s = str.replace(/\\u001b\\[\\d+m/g, '')\n  return wcwidth == null ? s.length : wcwidth(s)\n}\n\n/**\n * Default printer\n */\n\nTable.string = string\n\n/**\n * Create a printer which right aligns the content by padding with `ch` on the left\n *\n * @param {String} ch\n * @returns {Function}\n */\n\nTable.leftPadder = leftPadder\n\nfunction leftPadder(ch) {\n  return function(val, width) {\n    var str = string(val)\n    var len = length(str)\n    var pad = width > len ? Array(width - len + 1).join(ch) : ''\n    return pad + str\n  }\n}\n\n/**\n * Printer which right aligns the content\n */\n\nvar padLeft = Table.padLeft = leftPadder(' ')\n\n/**\n * Create a printer which pads with `ch` on the right\n *\n * @param {String} ch\n * @returns {Function}\n */\n\nTable.rightPadder = rightPadder\n\nfunction rightPadder(ch) {\n  return function padRight(val, width) {\n    var str = string(val)\n    var len = length(str)\n    var pad = width > len ? Array(width - len + 1).join(ch) : ''\n    return str + pad\n  }\n}\n\nvar padRight = rightPadder(' ')\n\n/**\n * Create a printer for numbers\n *\n * Will do right alignment and optionally fix the number of digits after decimal point\n *\n * @param {Number} [digits] - Number of digits for fixpoint notation\n * @returns {Function}\n */\n\nTable.number = function(digits) {\n  return function(val, width) {\n    if (val == null) return ''\n    if (typeof val != 'number')\n      throw new Error(''+val + ' is not a number')\n    var str = digits == null ? val+'' : val.toFixed(digits)\n    return padLeft(str, width)\n  }\n}\n\nfunction each(row, fn) {\n  for(var key in row) {\n    if (key == '__printers') continue\n    fn(key, row[key])\n  }\n}\n\n/**\n * Get list of columns in printing order\n *\n * @returns {string[]}\n */\n\nTable.prototype.columns = function() {\n  var cols = {}\n  for(var i = 0; i < 2; i++) { // do 2 times\n    this.rows.forEach(function(row) {\n      var idx = 0\n      each(row, function(key) {\n        idx = Math.max(idx, cols[key] || 0)\n        cols[key] = idx\n        idx++\n      })\n    })\n  }\n  return Object.keys(cols).sort(function(a, b) {\n    return cols[a] - cols[b]\n  })\n}\n\n/**\n * Format just rows, i.e. print the table without headers and totals\n *\n * @returns {String} String representaion of the table\n */\n\nTable.prototype.print = function() {\n  var cols = this.columns()\n  var separator = this.separator\n  var widths = {}\n  var out = ''\n\n  // Calc widths\n  this.rows.forEach(function(row) {\n    each(row, function(key, val) {\n      var str = row.__printers[key].call(row, val)\n      widths[key] = Math.max(length(str), widths[key] || 0)\n    })\n  })\n\n  // Now print\n  this.rows.forEach(function(row) {\n    var line = ''\n    cols.forEach(function(key) {\n      var width = widths[key]\n      var str = row.hasOwnProperty(key)\n        ? ''+row.__printers[key].call(row, row[key], width)\n        : ''\n      line += padRight(str, width) + separator\n    })\n    line = line.slice(0, -separator.length)\n    out += line + '\\n'\n  })\n\n  return out\n}\n\n/**\n * Format the table\n *\n * @returns {String}\n */\n\nTable.prototype.toString = function() {\n  var cols = this.columns()\n  var out = new Table()\n\n  // copy options\n  out.separator = this.separator\n\n  // Write header\n  cols.forEach(function(col) {\n    out.cell(col, col)\n  })\n  out.newRow()\n  out.pushDelimeter(cols)\n\n  // Write body\n  out.rows = out.rows.concat(this.rows)\n\n  // Totals\n  if (this.totals && this.rows.length) {\n    out.pushDelimeter(cols)\n    this.forEachTotal(out.cell.bind(out))\n    out.newRow()\n  }\n\n  return out.print()\n}\n\n/**\n * Push delimeter row to the table (with each cell filled with dashs during printing)\n *\n * @param {String[]} [cols]\n * @returns {Table} `this`\n */\n\nTable.prototype.pushDelimeter = function(cols) {\n  cols = cols || this.columns()\n  cols.forEach(function(col) {\n    this.cell(col, undefined, leftPadder('-'))\n  }, this)\n  return this.newRow()\n}\n\n/**\n * Compute all totals and yield the results to `cb`\n *\n * @param {Function} cb - Callback function with signature `(column, value, printer)`\n */\n\nTable.prototype.forEachTotal = function(cb) {\n  for(var key in this.totals) {\n    var aggr = this.totals[key]\n    var acc = aggr.init\n    var len = this.rows.length\n    this.rows.forEach(function(row, idx) {\n      acc = aggr.reduce.call(row, acc, row[key], idx, len)\n    })\n    cb(key, acc, aggr.printer)\n  }\n}\n\n/**\n * Format the table so that each row represents column and each column represents row\n *\n * @param {Object} [opts]\n * @param {String} [ops.separator] - Column separation string\n * @param {Function} [opts.namePrinter] - Printer to format column names\n * @returns {String}\n */\n\nTable.prototype.printTransposed = function(opts) {\n  opts = opts || {}\n  var out = new Table\n  out.separator = opts.separator || this.separator\n  this.columns().forEach(function(col) {\n    out.cell(0, col, opts.namePrinter)\n    this.rows.forEach(function(row, idx) {\n      out.cell(idx+1, row[col], row.__printers[col])\n    })\n    out.newRow()\n  }, this)\n  return out.print()\n}\n\n/**\n * Sort the table\n *\n * @param {Function|string[]} [cmp] - Either compare function or a list of columns to sort on\n * @returns {Table} `this`\n */\n\nTable.prototype.sort = function(cmp) {\n  if (typeof cmp == 'function') {\n    this.rows.sort(cmp)\n    return this\n  }\n\n  var keys = Array.isArray(cmp) ? cmp : this.columns()\n\n  var comparators = keys.map(function(key) {\n    var order = 'asc'\n    var m = /(.*)\\|\\s*(asc|des)\\s*$/.exec(key)\n    if (m) {\n      key = m[1]\n      order = m[2]\n    }\n    return function (a, b) {\n      return order == 'asc'\n        ? compare(a[key], b[key])\n        : compare(b[key], a[key])\n    }\n  })\n\n  return this.sort(function(a, b) {\n    for (var i = 0; i < comparators.length; i++) {\n      var order = comparators[i](a, b)\n      if (order != 0) return order\n    }\n    return 0\n  })\n}\n\nfunction compare(a, b) {\n  if (a === b) return 0\n  if (a === undefined) return 1\n  if (b === undefined) return -1\n  if (a === null) return 1\n  if (b === null) return -1\n  if (a > b) return 1\n  if (a < b) return -1\n  return compare(String(a), String(b))\n}\n\n/**\n * Add a total for the column\n *\n * @param {String} col - column name\n * @param {Object} [opts]\n * @param {Function} [opts.reduce = sum] - reduce(acc, val, idx, length) function to compute the total value\n * @param {Function} [opts.printer = padLeft] - Printer to format the total cell\n * @param {Any} [opts.init = 0] - Initial value for reduction\n * @returns {Table} `this`\n */\n\nTable.prototype.total = function(col, opts) {\n  opts = opts || {}\n  this.totals = this.totals || {}\n  this.totals[col] = {\n    reduce: opts.reduce || Table.aggr.sum,\n    printer: opts.printer || padLeft,\n    init: opts.init == null ? 0 : opts.init\n  }\n  return this\n}\n\n/**\n * Predefined helpers for totals\n */\n\nTable.aggr = {}\n\n/**\n * Create a printer which formats the value with `printer`,\n * adds the `prefix` to it and right aligns the whole thing\n *\n * @param {String} prefix\n * @param {Function} printer\n * @returns {printer}\n */\n\nTable.aggr.printer = function(prefix, printer) {\n  printer = printer || string\n  return function(val, width) {\n    return padLeft(prefix + printer(val), width)\n  }\n}\n\n/**\n * Sum reduction\n */\n\nTable.aggr.sum = function(acc, val) {\n  return acc + val\n}\n\n/**\n * Average reduction\n */\n\nTable.aggr.avg = function(acc, val, idx, len) {\n  acc = acc + val\n  return idx + 1 == len ? acc/len : acc\n}\n\n/**\n * Print the array or object\n *\n * @param {Array|Object} obj - Object to print\n * @param {Function|Object} [format] - Format options\n * @param {Function} [cb] - Table post processing and formating\n * @returns {String}\n */\n\nTable.print = function(obj, format, cb) {\n  var opts = format || {}\n\n  format = typeof format == 'function'\n    ? format\n    : function(obj, cell) {\n      for(var key in obj) {\n        if (!obj.hasOwnProperty(key)) continue\n        var params = opts[key] || {}\n        cell(params.name || key, obj[key], params.printer)\n      }\n    }\n\n  var t = new Table\n  var cell = t.cell.bind(t)\n\n  if (Array.isArray(obj)) {\n    cb = cb || function(t) { return t.toString() }\n    obj.forEach(function(item) {\n      format(item, cell)\n      t.newRow()\n    })\n  } else {\n    cb = cb || function(t) { return t.printTransposed({separator: ' : '}) }\n    format(obj, cell)\n    t.newRow()\n  }\n\n  return cb(t)\n}\n\n/**\n * Same as `Table.print()` but yields the result to `console.log()`\n */\n\nTable.log = function(obj, format, cb) {\n  console.log(Table.print(obj, format, cb))\n}\n\n/**\n * Same as `.toString()` but yields the result to `console.log()`\n */\n\nTable.prototype.log = function() {\n  console.log(this.toString())\n}\n"]},"metadata":{},"sourceType":"script"}